Description: An empty VPC (10.0.0.0/16) with one (public) subnet (/24) with internet gateway and routing table that allows full interaction between subnet and outside world.
Parameters:
  VPCCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC.
    Type: String
    Default: 10.0.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for public subnet 1
    Type: String
    Default: 10.0.1.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for public subnet 2
    Type: String
    Default: 10.0.2.0/24

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for private subnet 1
    Type: String
    Default: 10.0.51.0/24

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for private subnet 2
    Type: String
    Default: 10.0.52.0/24

  AvailabilityZone1:
    Description: Please enter the name of the first Availability Zone.
    Type: String
    Default: us-east-1a

  AvailabilityZone2:
    Description: Please enter the name of the first Availability Zone.
    Type: String
    Default: us-east-1b

Resources:
  # We need a VPC.
  MyFirstVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsHostnames: true
      Tags: # Good practice is to add tags!
        - Key: Name
          Value: MyFirstVPC

  # Define internet gateway to allow access to the "outside world"
  MyFirstInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: MyFirstInternetGateway

  # Connect internet gateway to VPC
  MyFirstVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref MyFirstInternetGateway
      VpcId: !Ref MyFirstVPC

  # Define two (public) subnets on the /24 domain that automatically
  # assigns all instances a public ip on launch
  MyFirstSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PublicSubnet1CIDR
      AvailabilityZone: !Ref AvailabilityZone1
      MapPublicIpOnLaunch: true
      VpcId: !Ref MyFirstVPC
      Tags:
        - Key: Name
          Value: MyFirstSubnet

  MySecondSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PublicSubnet2CIDR
      AvailabilityZone: !Ref AvailabilityZone2
      MapPublicIpOnLaunch: true
      VpcId: !Ref MyFirstVPC
      Tags:
        - Key: Name
          Value: MySecondSubnet

  # Add a routing table (and route) to the VPC to route all traffic
  # via the internet gateway
  MyFirstRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyFirstVPC
      Tags:
        - Key: Name
          Value: MyFirstRouteTable

  # Default route to the internet gateway
  MyFirstDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyFirstInternetGateway
      RouteTableId: !Ref MyFirstRouteTable

  # Associate routing table to subnets
  MyFirstSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MyFirstRouteTable
      SubnetId: !Ref MyFirstSubnet

  MySecondSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MyFirstRouteTable
      SubnetId: !Ref MySecondSubnet

  # Define two (private) subnets on the /24 domain
  MyFirstPrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PrivateSubnet1CIDR
      AvailabilityZone: !Ref AvailabilityZone1
      VpcId: !Ref MyFirstVPC
      Tags:
        - Key: Name
          Value: MyFirstPrivateSubnet

  MySecondPrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PrivateSubnet2CIDR
      AvailabilityZone: !Ref AvailabilityZone2
      VpcId: !Ref MyFirstVPC
      Tags:
        - Key: Name
          Value: MySecondPrivateSubnet


# Define outputs so values can be imported in another template
Outputs:
  VPCRef:
    Description: Reference to the VPC
    Value: !Ref MyFirstVPC
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", VPC ] ] # Fancy way of making the exported variable called "MyBase:VPC"
  VPCGatewayAttachmentRef:
    Description: Reference to the VPC gateway attachment
    Value: !Ref MyFirstVPCGatewayAttachment
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", MyFirstVPCGatewayAttachment ] ]
  MyFirstRouteTableRef:
    Description: Reference to the VPC route table
    Value: !Ref MyFirstRouteTable
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", MyFirstRouteTable ] ]
  MyFirstSubnetRef:
    Description: Reference to my first (public) subnet
    Value: !Ref MyFirstSubnet
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", MyFirstSubnet ] ]
  MySecondSubnetRef:
    Description: Reference to my second (public) subnet
    Value: !Ref MySecondSubnet
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", MySecondSubnet ] ]
  MyFirstPrivateSubnetRef:
    Description: Reference to my first (private) subnet
    Value: !Ref MyFirstPrivateSubnet
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", MyFirstPrivateSubnet ] ]
  MySecondPrivateSubnetRef:
    Description: Reference to my second (private) subnet
    Value: !Ref MySecondPrivateSubnet
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", MySecondPrivateSubnet ] ]
  AvailabilityZone1Ref:
    Description: Reference to Availability Zone 1
    Value: !Ref AvailabilityZone1
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", AvailabilityZone1 ] ]
  AvailabilityZone2Ref:
    Description: Reference to Availability Zone 2
    Value: !Ref AvailabilityZone2
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", AvailabilityZone2 ] ]
